==================================
Aikaterini Iliakopoulou (ai2315)
Cecilia Watt (ciw2104)
COMS E6111 Project #2
DUE March 27 2015
==================================
[001] List of Files
[002] How to Run
[003] High-Level Description
[004] Freebase API Key

==================================
[001] LIST OF FILES
==================================
Retriever.java
[creator package]
	Creator.java
	EntityBoxCreator.java
	QueryBoxCreator.java
[entities package]
	Actor.java
	Author.java
	BusinessPerson.java
	Coach.java
	Film.java
	League.java
	Organization.java
	Person.java
	Player.java
	Spouse.java
	Team.java
[output package]
	Output.java
	EntityBox.java
	QueryBox.java
[result package]
	JSONable.java
	MQLResult.java
	Result.java
	Role.java
	SearchResult.java
	TopicResult.java
	Type.java
	Value.java
	Values.java
[service package]
	Service.java
	SearchService.java
	TopicService.java
	MQLService.java
==================================
[002] HOW TO RUN
==================================

RUN:

==================================
[003] HIGH LEVEL DESCRIPTION
==================================
The main method in Retriever prompts the user for input.

[INFOBOX QUERY INPUT]

If the user enters an infobox query, an EntityBoxCreator object will be instantiated. 

EntityBoxCreator creates a SearchService object using the provided API key and the query. 

The requestInfo() method in SearchService is then called. This will retrieve a maximum of 20 results using the Freebase Search API, 

from which TopicResult objects will be created based on the retrieved mIds, using the TopicService methods, 

in order to see what types of entities each mId matches to. We construct TopicResult objects for each of these search results in order to see all of the entities they have performed a role as. It would be more lightweight to simply check the "notable" field that is easily accessed through the Search API, but this would only show people whose most notable role is as a businessperson, actor, or author. Using the TopicResult objects, we are able to more comprehensively see all the entities a person has. 

Each SearchService object has a set of the entities the program is looking for, which can be PERSON, BUSINESSPERSON, ACTOR, AUTHOR, LEAGUE or TEAM. 

If all 20 Topic Results, which are created based on the 20 mIds returned by Freebase Search API,

don't contain any of those types then an error message is printed and the program exits. 

Otherwise, the first mId that corresponds to at least one type contained in the above set is chosen, and a SearchResult object is created. 

SearchResult contains entity's name, mId, id and notable_id, although essentially only mId is used by the program.

In the next step, EntityBoxCreator fetches the mId and creates a TopicService object using the API key and the mId. 

The requestInfo() method in TopicService is then called, which calls the Freebase Topic API using the given mId and creates a Topic Result

object by parsing the json document that is returned by the API. The mapping of the values of the json document happens inside the

Topic Result instance, where the different types associated with the topic are identified. Then, given the identified types the respective

mapping methods are called that parse the json document in search of the required fields that are necessary to form the output. 

Finally, EntityBoxCreator creates an EntityBox object given the TopicResult that is created by parsing the retrieved json document,

and calls print() method to output the desired information in a formatted view to the console. 

[QUESTION INPUT]

If the user enters a question in the form "Who created [X]?" a QueryBoxCreator object will be instantiated. 

QueryBoxCreator creates an MQLService object using the provided API key and the processed query (the X from the question). 

The requestInfo() method in MQLService is then called.

MQLService makes two requests to the API: first, it assumes that X is a book title and will search for authors who wrote books with X 

in the title; next, it assumes that X is an organization name and will search for businesspeople who founded organizations with named X. 

MQLService then creates an MQLResult object, passing in the two JSONArray responses [??? where did those come from] as parameters.

MQLResult parses the two JSONArrays. For each object in each array, the name of the person and the name of the book/organiation

are extracted. A Role object is created, which holds the person's name and the job through which they created their book/organization.

A Map inside MQLResult instance is populated with each pairing of role and creation.

QueryBoxCreator creates a QueryBox object with MQLResult as a parameter.

QueryBox gets the mql_map from MQLResult.getMQLMap() method, and puts the keys into a List which is then sorted in alphabetical order 

by the person's first name. The items from this list and their associated values in the map are then printed to console. 

==================================
[005] FREEBASE API KEY
==================================
AIzaSyDaVrp5DyCfmDx60NFbBBSzPCfK8X4qyho